	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 68)				    # return attack 
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 72)					# return defense           
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 76)					# return shots 
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 80)					# return min_dmg 
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 84)					# return max_dmg 
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 88)					# return speed
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 92)					# return initiative
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 96)					# return flying? true/false
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 100)					# return Health
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 104)					# return KnownSpells
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 108)					# --
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 112)					# --
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 116)					# return spellpoints             #v[29]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 120)					# return spellpoints1            #v[30]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 124)					# return spellpoints2           #v[31]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 128)					# return Experience			  #v[32]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 132)					# return power		  		      #v[33]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 136)					# return TimeToCommand			  #v[34]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 140)					# return Tier					  #v[35]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 144)					# return Upgrade		  		  #v[36]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 148)					# return PairCreature			  #v[37]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 152)					# return CreatureTown            #v[38]
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 156)					# return MagicElement array	
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 160)					# return MagicElement array
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 168)					# return unit WeeklyGrowth
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 172)					# return unit Cost
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 176)					- return unit Cost Wood
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 180)					- return unit Cost Ore
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 184)					- return unit Cost Mercury
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 188)					- return unit Cost Crystal
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 192)					- return unit Cost Sulfur
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 196)					- return unit Cost Gem
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 200)					- return unit Cost Gold
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 204)					# return PresetPrice
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 208)					# return SubjectOfRandomGeneration
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 212)					- return MonsterShared	
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 216)					- return MonsterShared	
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 220) 					# return unit combat size (1 or 2)
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 224)					# return unit pattern attack
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 228)					- return unit pattern attack
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 232)					- return unit pattern attack
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 236)					- return unit pattern attack
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 240)					- return flybySequence
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 244)					# return Visual
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 248)					# return Visual
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 252)					# return Range
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 256)					# return BaseCreature							#v[64]?
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 260)					# return Upgrades Array  						#v[65]?
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 264)					# return Upgrades Array						#v[66]?
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 268)					# return Abilities
	*(if_creature_exists_return_its_xdb_file_else_0(*(v5 + 28)) + 272)					# return Abilities
	
	( v6 && v6[38] == race_id_v4 && v6[35] == unit_tier_v3 && !v6[64] - upgrades or abilities)
	============================================================================================
	Temporary Unit value offsets
	============================================================================================

  *this = *(a2 + 68);                           // unit attack
  *(this + 4) = *(a2 + 72);                     // unit defense
  *(this + 8) = *(a2 + 80);                     // unit min_dmg 
  *(this + 12) = *(a2 + 84);                    // unit max_dmg 
  *(this + 24) = *(a2 + 88);                    // unit speed
  *(this + 28) = *(a2 + 92);                    // unit initiative
  *(this + 32) = *(a2 + 76);                    // unit shots 
  *(this + 36) = 0;
  *(this + 40) = 0;
  *(this + 44) = *(a2 + 116);                   // unit spellpoints
  *(this + 16) = *(a2 + 100);                   // unit hp
  *(this + 20) = *(a2 + 100);                   // unit hp
  result = *(a2 + 252);                         // Range
  *(this + 48) = result;                        // Range


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	*(v7 + 32)								- return stack size
	
	
	*(v2 + 164)								- return unit spellpower/ initial offset?
	*(v2 + 180) 							- return unit shot count
	*(v2 + 184) 							- return unit spellpoints (mana)
	*(v2 + 188)								- return unit spellpoints1 (special abilities charges)
	*(v2 + 192)								- return unit spellpoints2 (gating related)
	*(v2 + 196)								- return mastery lvl
	*(v2 + 200)								- return duration
	*(v2 + 204)								- return defense
	*(v2 + 208) 							- return health
	*(v2 + 212)								- return initiative
    *(v2 + 216)								- return Tier
	*(v2 + 220)								- Casting spell "Wasp swarm" mastery
	
	===================================================================================================
	
  *(unit_v8 + 76) 							- unit attack after bonuses
  *(unit_v8 + 80) 							- unit defense after bonuses
  *(unit_v8 + 84) 							- unit min dmg after bonuses
  *(unit_v8 + 88) 							- unit max dmg after bonuses
  *(unit_v8 + 92)							- unit hp after bonuses
  *(unit_v8 + 96)							- unit hp after bonuses
  *(unit_v8 + 100)							- unit speed after bonuses
  *(unit_v8 + 104)							- unit initiative after bonuses
  *(unit_v8 + 112)							- unit morale after bonuses
  *(unit_v8 + 116)							- unit luck after bonuses
  *(unit_v8 + 124)							- unit range
  *(unit_v8 + 152) = 0;
  *(unit_v8 + 156)
  *(unit_v8 + 168)
  *(unit_v8 + 196) = sub_9DBE10(a3, v5, SLODWORD(a4));
  *(unit_v8 + 184) = *(v5 + 72);
  *(unit_v8 + 188) = *(v5 + 76);
  *v13 = *(v5 + 56);
  v13[1] = *(v5 + 60);
  v13[2] = *(v5 + 64);
  v13[3] = *(v5 + 68);